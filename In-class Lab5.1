#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <algorithm>
#include <vector>
#include <stack>

using namespace std;
using namespace std::chrono;

void quicksort(int *arr,int m, int n){
    if (m<n){
    int pivot = arr[n-1];
    int temp;
    int i=m-1;
    int j=m;
   while (j<n){
    if (arr[j] < pivot){
        i=i+1;
        temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        j=j+1;
    }
    else {
        j=j+1;
    }

   }
   i=i+1;
   temp = arr[i];
   arr[i]= arr[n-1];
   arr[n-1] = temp;
   
   quicksort(arr,m,i);
   quicksort(arr,i+1,n);
  }
}

void Nquicksort(int arr[], int begin, int end) {
    stack<int> stack;
    stack.push(begin);
    stack.push(end);
    
    while(!stack.empty()) {
        end = stack.top();
        stack.pop();
        begin = stack.top();
        stack.pop();
        
        int pivot = arr[(begin+end)/2];
        int i = begin, j = end;
        
        while(i <= j) {
            while(arr[i] < pivot) i++;
            while(arr[j] > pivot) j--;
            if(i <= j) {
                swap(arr[i], arr[j]);
                i++;
                j--;
            }
        }
        
        if(begin < j) {
            stack.push(begin);
            stack.push(j);
        }
        
        if(i < end) {
            stack.push(i);
            stack.push(end);
        }
    }
}


int main (){
    

    srand(time(nullptr)); // Seed the random number generator with the current time
    
    // Generate five random arrays with lengths in the range of [3, 20]
    for (int i = 0; i < 5; i++) {
        int length = rand() % 18000 + 500; // Randomly choose a length between 3 and 20
        int* arr = new int[length]; // Allocate memory for the array
        
        // Fill the array with random numbers between 0 and 99
        for (int j = 0; j < length; j++) {
            arr[j] = rand() % 100;
        }
        
        int quickarr[length];

        for (int i = 0; i < length; i++) {
            quickarr[i] = arr[i];
        }

        


        delete[] arr; // Free the memory used by the array
        
        
        auto start_timei = high_resolution_clock::now();
        quicksort(quickarr,0,length);
        auto end_timei = high_resolution_clock::now();
        auto durationi = duration_cast<nanoseconds>(end_timei - start_timei);
        cout<<"Total elements in Recursive quick sort array: "<<length<<endl;
        cout << "Time taken to Recursive quick sort the array: " << durationi.count() << " nanoseconds" << endl;
        
        cout << endl;

        auto start_timei2 = high_resolution_clock::now();
        Nquicksort(quickarr,0,length);
        auto end_timei2 = high_resolution_clock::now();
        auto durationi2 = duration_cast<nanoseconds>(end_timei2 - start_timei2);
        cout<<"Total elements in Non-Recursive quick sort array: "<<length<<endl;
        cout << "Time taken to Non-Recursive quick sort the array: " << durationi2.count() << " nanoseconds" << endl;
        cout << endl;


}
}
